/**
 * @file index.ts
 * @description Central type definitions for the trading application
 */

// ============================
// Trading Types
// ============================

/**
 * Represents a trading position (long or short)
 */
export interface Position {
  entryPrice: number;              // Entry price of the position
  entryTime: number;               // Unix timestamp when position was opened
  size: number;                    // Position size in base asset
  type: 'long' | 'short';         // Position direction
  stopLoss?: number;              // Optional stop loss price
  takeProfit?: number;            // Optional take profit price
  metadata?: {                    // Optional strategy-specific data
    level?: number;               // For reverse ratio strategy
    reason?: string;              // Reason for opening position
    [key: string]: any;
  };
}

/**
 * Trading signal generated by strategies
 */
export interface Signal {
  type: 'buy' | 'sell' | 'hold';  // Signal action
  strength: number;               // Signal strength (0-1)
  price: number;                  // Target price
  size?: number;                  // Optional position size
  reason: string;                 // Human-readable reason
  metadata?: {                    // Optional strategy-specific data
    level?: number;
    targetPrice?: number;
    [key: string]: any;
  };
}

/**
 * Executed trade record
 */
export interface Trade {
  id: string;                     // Unique trade identifier
  timestamp: number;              // Unix timestamp of execution
  type: 'buy' | 'sell';          // Trade direction
  price: number;                  // Execution price
  size: number;                   // Trade size
  value: number;                  // Total trade value (price * size)
  fee?: number;                   // Trading fee paid
  grossFee?: number;              // Total fee before rebates
  feeRebate?: number;             // Fee rebate amount
  position?: Position;            // Associated position (for closes)
  profit?: number;                // Profit in USD (for closing trades)
  profitPercent?: number;         // Profit percentage
  reason: string;                 // Human-readable trade reason
}

/**
 * Order placed but not yet executed
 */
export interface Order {
  id: string;                     // Unique order identifier
  type: 'limit' | 'market';       // Order type
  side: 'buy' | 'sell';          // Order side
  price: number;                  // Order price (limit orders)
  size: number;                   // Order size
  status: 'pending' | 'filled' | 'cancelled'; // Order status
  createdAt: number;              // Creation timestamp
  filledAt?: number;              // Execution timestamp
}

// ============================
// Market Data Types
// ============================

/**
 * OHLCV candle data
 */
export interface CandleData {
  time: number;                   // Unix timestamp in seconds
  open: number;                   // Opening price
  high: number;                   // Highest price
  low: number;                    // Lowest price
  close: number;                  // Closing price
  volume: number;                 // Trading volume
}

/**
 * Aggregated candle with metadata
 */
export interface AggregatedCandle extends CandleData {
  updateCount: number;            // Number of updates received
  isComplete: boolean;            // Whether candle is finalized
}

/**
 * Real-time price update
 */
export interface PriceUpdate {
  time: number;                   // Unix timestamp
  price: number;                  // Current price
  volume?: number;                // Optional volume
  pair: string;                   // Trading pair (e.g., "BTC-USD")
}

/**
 * WebSocket message from exchange
 */
export interface WebSocketMessage {
  type: string;                   // Message type
  sequence: number;               // Sequence number
  product_id: string;             // Product/pair ID
  price?: string;                 // Current price
  open_24h?: string;              // 24h open price
  volume_24h?: string;            // 24h volume
  low_24h?: string;               // 24h low
  high_24h?: string;              // 24h high
  volume_30d?: string;            // 30d volume
  best_bid?: string;              // Best bid price
  best_ask?: string;              // Best ask price
  side?: string;                  // Trade side
  time?: string;                  // Message time
  trade_id?: number;              // Trade ID
  last_size?: string;             // Last trade size
}

/**
 * Ticker-specific WebSocket message
 */
export interface TickerMessage extends WebSocketMessage {
  type: 'ticker';
}

/**
 * Match/trade WebSocket message
 */
export interface MatchMessage extends WebSocketMessage {
  type: 'match';
  size: string;                   // Trade size
}

/**
 * WebSocket subscription message
 */
export interface SubscribeMessage {
  type: 'subscribe';
  product_ids: string[];          // Products to subscribe to
  channels: string[];             // Channels to subscribe to
}

// ============================
// Strategy Types
// ============================

/**
 * Strategy configuration
 */
export interface StrategyConfig {
  vaultAllocation: number;        // % of profits to vault (0-100)
  btcGrowthAllocation: number;    // % of profits to keep in BTC (0-100)
  maxDrawdown?: number;           // Optional max drawdown %
  vaultConfig?: VaultAllocationConfig; // Enhanced vault configuration
  opportunityConfig?: OpportunityDetectionConfig; // Opportunity detection
  [key: string]: any;             // Strategy-specific parameters
}

/**
 * Vault allocation configuration
 */
export interface VaultAllocationConfig {
  // Triple Compounding System
  btcVaultPercent: number;        // % to BTC vault (default: 14.3% = 1/7)
  usdGrowthPercent: number;       // % to USD growth (default: 14.3% = 1/7)
  usdcVaultPercent: number;       // % to USDC vault (default: 71.4% = 5/7)
  
  // Compound Settings
  compoundFrequency: 'trade' | 'daily' | 'weekly' | 'monthly';
  minCompoundAmount: number;      // Minimum profit to trigger compound
  autoCompound: boolean;          // Auto-compound vault earnings
  
  // Vault Targets
  btcVaultTarget?: number;        // Optional target BTC amount
  usdcVaultTarget?: number;       // Optional target USDC amount
  rebalanceThreshold?: number;    // % deviation to trigger rebalance
}

/**
 * Opportunity detection configuration
 */
export interface OpportunityDetectionConfig {
  // Multi-timeframe analysis
  timeframes: Array<{
    period: string;
    weight: number;
  }>;

  // Signal thresholds
  minSignalStrength: number;      // 0-1
  confirmationRequired: number;   // Number of timeframes to confirm

  // Pre-emptive orders
  enablePreEmptive: boolean;
  maxPreEmptiveOrders: number;
  preEmptiveSpread: number;       // % below current price
}

