/**
 * @file index.ts
 * @description Central type definitions for the trading application
 */

// ============================
// Trading Types
// ============================

/**
 * Represents a trading position (long or short)
 */
export interface Position {
  entryPrice: number;              // Entry price of the position
  entryTime: number;               // Unix timestamp when position was opened
  size: number;                    // Position size in base asset
  type: 'long' | 'short';         // Position direction
  stopLoss?: number;              // Optional stop loss price
  takeProfit?: number;            // Optional take profit price
  metadata?: {                    // Optional strategy-specific data
    level?: number;               // For reverse ratio strategy
    reason?: string;              // Reason for opening position
    [key: string]: any;
  };
}

/**
 * Trading signal generated by strategies
 */
export interface Signal {
  type: 'buy' | 'sell' | 'hold';  // Signal action
  strength: number;               // Signal strength (0-1)
  price: number;                  // Target price
  size?: number;                  // Optional position size
  reason: string;                 // Human-readable reason
  metadata?: {                    // Optional strategy-specific data
    level?: number;
    targetPrice?: number;
    [key: string]: any;
  };
}

/**
 * Executed trade record
 */
export interface Trade {
  id: string;                     // Unique trade identifier
  timestamp: number;              // Unix timestamp of execution
  type: 'buy' | 'sell';          // Trade direction
  price: number;                  // Execution price
  size: number;                   // Trade size
  value: number;                  // Total trade value (price * size)
  fee?: number;                   // Trading fee paid
  grossFee?: number;              // Total fee before rebates
  feeRebate?: number;             // Fee rebate amount
  position?: Position;            // Associated position (for closes)
  profit?: number;                // Profit in USD (for closing trades)
  profitPercent?: number;         // Profit percentage
  reason: string;                 // Human-readable trade reason
}

/**
 * Order placed but not yet executed
 */
export interface Order {
  id: string;                     // Unique order identifier
  type: 'limit' | 'market';       // Order type
  side: 'buy' | 'sell';          // Order side
  price: number;                  // Order price (limit orders)
  size: number;                   // Order size
  status: 'pending' | 'filled' | 'cancelled'; // Order status
  createdAt: number;              // Creation timestamp
  filledAt?: number;              // Execution timestamp
}

// ============================
// Market Data Types
// ============================

/**
 * OHLCV candle data
 */
export interface CandleData {
  time: number;                   // Unix timestamp in seconds
  open: number;                   // Opening price
  high: number;                   // Highest price
  low: number;                    // Lowest price
  close: number;                  // Closing price
  volume: number;                 // Trading volume
}

/**
 * Aggregated candle with metadata
 */
export interface AggregatedCandle extends CandleData {
  updateCount: number;            // Number of updates received
  isComplete: boolean;            // Whether candle is finalized
}

/**
 * Real-time price update
 */
export interface PriceUpdate {
  time: number;                   // Unix timestamp
  price: number;                  // Current price
  volume?: number;                // Optional volume
  pair: string;                   // Trading pair (e.g., "BTC-USD")
}

/**
 * WebSocket message from exchange
 */
export interface WebSocketMessage {
  type: string;                   // Message type
  sequence: number;               // Sequence number
  product_id: string;             // Product/pair ID
  price?: string;                 // Current price
  open_24h?: string;              // 24h open price
  volume_24h?: string;            // 24h volume
  low_24h?: string;               // 24h low
  high_24h?: string;              // 24h high
  volume_30d?: string;            // 30d volume
  best_bid?: string;              // Best bid price
  best_ask?: string;              // Best ask price
  side?: string;                  // Trade side
  time?: string;                  // Message time
  trade_id?: number;              // Trade ID
  last_size?: string;             // Last trade size
}

/**
 * Ticker-specific WebSocket message
 */
export interface TickerMessage extends WebSocketMessage {
  type: 'ticker';
}

/**
 * Match/trade WebSocket message
 */
export interface MatchMessage extends WebSocketMessage {
  type: 'match';
  size: string;                   // Trade size
}

/**
 * WebSocket subscription message
 */
export interface SubscribeMessage {
  type: 'subscribe';
  product_ids: string[];          // Products to subscribe to
  channels: string[];             // Channels to subscribe to
}

// ============================
// Strategy Types
// ============================

/**
 * Strategy configuration
 */
export interface StrategyConfig {
  vaultAllocation: number;        // % of profits to vault (0-100)
  btcGrowthAllocation: number;    // % of profits to keep in BTC (0-100)
  maxDrawdown?: number;           // Optional max drawdown %
  vaultConfig?: VaultAllocationConfig; // Enhanced vault configuration
  opportunityConfig?: OpportunityDetectionConfig; // Opportunity detection
  [key: string]: any;             // Strategy-specific parameters
}

/**
 * Vault allocation configuration
 */
export interface VaultAllocationConfig {
  // Triple Compounding System
  btcVaultPercent: number;        // % to BTC vault (default: 14.3% = 1/7)
  usdGrowthPercent: number;       // % to USD growth (default: 14.3% = 1/7)
  usdcVaultPercent: number;       // % to USDC vault (default: 71.4% = 5/7)
  
  // Compound Settings
  compoundFrequency: 'trade' | 'daily' | 'weekly' | 'monthly';
  minCompoundAmount: number;      // Minimum profit to trigger compound
  autoCompound: boolean;          // Auto-compound vault earnings
  
  // Vault Targets
  btcVaultTarget?: number;        // Optional target BTC amount
  usdcVaultTarget?: number;       // Optional target USDC amount
  rebalanceThreshold?: number;    // % deviation to trigger rebalance
}

/**
 * Opportunity detection configuration
 */
export interface OpportunityDetectionConfig {
  // Multi-timeframe analysis
  timeframes: Array<{
    period: string;
    weight: number;
  }>;
  
  // Signal thresholds
  minSignalStrength: number;      // 0-1
  confirmationRequired: number;   // Number of timeframes to confirm
  
  // Pre-emptive orders
  enablePreEmptive: boolean;
  maxPreEmptiveOrders: number;
  preEmptiveSpread: number;       // % below current price
}

/**
 * Strategy state during execution
 */
export interface StrategyState {
  positions: Position[];          // Active positions
  balance: {
    usd: number;                  // USD balance
    btcVault: number;             // BTC accumulated from profit allocations
    btcPositions: number;         // BTC currently held in active positions
    vault: number;                // USDC vault balance
  };
  lastSignal?: Signal;            // Most recent signal
  metadata?: {                    // Strategy-specific state
    [key: string]: any;
  };
}

/**
 * Backtest result with comprehensive metrics
 */
export interface BacktestResult {
  trades: Trade[];                // All executed trades
  metrics: {
    // Basic metrics
    totalTrades: number;
    winningTrades: number;
    losingTrades: number;
    winRate: number;
    totalReturn: number;
    totalReturnPercent: number;
    maxDrawdown: number;
    maxDrawdownPercent: number;
    sharpeRatio: number;
    profitFactor: number;
    averageWin: number;
    averageLoss: number;
    averageHoldTime: number;      // in hours
    vaultBalance: number;
    btcGrowth: number;
    
    // Advanced metrics
    avgPositionSize: number;
    tradesPerDay: number;
    tradesPerWeek: number;
    tradesPerMonth: number;
    totalFees: number;
    feesAsPercentOfProfit: number;
    vaultCAGR: number;            // Compound Annual Growth Rate
    btcGrowthPercent: number;
    maxConsecutiveLosses: number;
    riskRewardRatio: number;
    
    // Balance growth metrics
    initialBalanceGrowth: number;
    initialBalanceGrowthPercent: number;
    finalTradingBalance: number;
    totalFeeRebates: number;
    netFeesAfterRebates: number;
    
    // Compound system metrics
    totalCompounded: number;
    compoundCount: number;
    avgCompoundSize: number;
    compoundAllocations: {
      btc: number;
      usd: number;
      usdc: number;
    };
    btcVaultValue: number;
    compoundGrowthRate: number;
    
    // Opportunity detection metrics
    opportunitiesDetected: number;
    preEmptiveOpportunities: number;
    multiTimeframeSignals: number;
    opportunitySuccessRate: number;
  };
  equity: Array<{                 // Equity curve data points
    timestamp: number;
    value: number;
    btcBalance: number;
    usdBalance: number;
    vaultBalance: number;
  }>;
  chartData: {                    // Time series data for charts
    vaultGrowth: Array<{time: number; value: number}>;
    btcGrowth: Array<{time: number; value: number}>;
    equityCurve: Array<{time: number; value: number}>;
    drawdown: Array<{time: number; value: number}>;
    tradeDistribution: {
      daily: Map<string, number>;
      weekly: Map<string, number>;
      monthly: Map<string, number>;
    };
    compoundTimeline: Array<{
      time: number;
      amount: number;
      btcAllocation: number;
      usdAllocation: number;
      usdcAllocation: number;
    }>;
  };
}

// ============================
// User/Account Types
// ============================

/**
 * Paper trading state
 */
export interface PaperTradingState {
  isRunning: boolean;             // Whether paper trading is active
  strategy: any;                  // Active strategy instance
  balance: {
    usd: number;
    btcVault: number;
    btcPositions: number;
    vault: number;
  };
  trades: Trade[];                // Executed trades
  currentSignal: Signal | null;   // Current signal
  performance: {
    totalValue: number;
    pnl: number;
    pnlPercent: number;
    winRate: number;
    totalTrades: number;
  };
  lastUpdate: number;             // Last update timestamp
}

/**
 * Persistent trading state for saving/loading
 */
export interface PersistentTradingState {
  isRunning: boolean;
  strategyType: string;
  strategyConfig: any;
  balance: {
    usd: number;
    btcVault: number;
    btcPositions: number;
    vault: number;
  };
  positions: any[];
  trades: any[];
  startTime: number;
  lastUpdateTime: number;
}

/**
 * Vault deposit record
 */
export interface Deposit {
  timestamp: number;              // Deposit time
  amount: number;                 // Deposit amount
  source: string;                 // 'profit' | 'manual' | 'initial'
}

/**
 * Bot vault for tracking individual bot performance
 */
export interface BotVault {
  botId: string;                  // Unique bot identifier
  name: string;                   // Bot display name
  strategy: string;               // Strategy name
  asset: string;                  // Trading asset (e.g., "BTC")
  status: 'active' | 'paused' | 'stopped';
  value: number;                  // Current vault value
  initialDeposit: number;         // Initial deposit amount
  growthPercent: number;          // Growth percentage
  totalTrades: number;            // Total trades executed
  winRate: number;                // Win rate percentage
  startedAt: number;              // Start timestamp
  deposits: Deposit[];            // Deposit history
}

/**
 * Asset-specific vault collection
 */
export interface AssetVaults {
  vaults: BotVault[];             // Bot vaults for this asset
  totalValue: number;             // Total value across all vaults
  totalGrowth: number;            // Total growth amount
}

/**
 * Overall vault data
 */
export interface VaultData {
  assets: Record<string, AssetVaults>; // Vaults by asset
  totalBots: number;              // Total number of bots
  totalGrowthPercent: number;     // Overall growth percentage
}

// ============================
// Common Utility Types
// ============================

/**
 * Compound engine state
 */
export interface CompoundState {
  btcVault: number;               // BTC vault balance
  usdGrowth: number;              // USD growth amount
  usdcVault: number;              // USDC vault balance
  totalCompounded: number;        // Total amount compounded
  lastCompoundTime: number;       // Last compound timestamp
  compoundCount: number;          // Number of compounds
}

/**
 * Compound transaction record
 */
export interface CompoundTransaction {
  timestamp: number;              // Transaction time
  profitAmount: number;           // Profit being compounded
  btcAllocation: number;          // BTC allocation amount
  usdAllocation: number;          // USD allocation amount
  usdcAllocation: number;         // USDC allocation amount
  btcPrice: number;               // BTC price at time of compound
  reason: string;                 // Reason for compound
}

/**
 * Opportunity signal with enhanced metadata
 */
export interface OpportunitySignal extends Signal {
  timeframe: string;              // Timeframe of opportunity
  confidence: number;             // Confidence level (0-1)
  triggerPrice?: number;          // Price to trigger order
  stopLoss?: number;              // Suggested stop loss
  preEmptive?: boolean;           // Whether this is pre-emptive
}

/**
 * Timeframe analysis result
 */
export interface TimeframeAnalysis {
  period: string;                 // Timeframe period
  signal: Signal;                 // Generated signal
  strength: number;               // Signal strength
  trend: 'bullish' | 'bearish' | 'neutral'; // Market trend
}

/**
 * News article with sentiment analysis
 */
export interface NewsArticle {
  id: string;                     // Article identifier
  title: string;                  // Article title
  summary: string;                // Article summary
  url: string;                    // Article URL
  source: string;                 // News source
  timestamp: number;              // Publication time
  sentiment: 'bullish' | 'bearish' | 'neutral'; // Sentiment
  impact: number;                 // Impact score (1-10)
  tags: string[];                 // Article tags
  keywords: string[];             // Extracted keywords
  
  // Price correlation data
  priceAtPublish?: number;        // Price when published
  priceChange1h?: number;         // 1h price change
  priceChange24h?: number;        // 24h price change
  
  // AI-specific fields
  aiAnalysis?: string;            // AI analysis summary
  confidence?: number;            // Analysis confidence
  tradingSignal?: 'buy' | 'sell' | 'hold'; // Trading recommendation
}

/**
 * News filter criteria
 */
export interface NewsFilter {
  category?: string;              // News category
  sentiment?: 'bullish' | 'bearish' | 'neutral';
  minImpact?: number;             // Minimum impact score
  keywords?: string[];            // Required keywords
  startDate?: number;             // Start date filter
  endDate?: number;               // End date filter
}

/**
 * Chart configuration
 */
export interface ChartConfig {
  theme: 'dark' | 'light';        // Chart theme
  timeframe: string;              // Display timeframe
  granularity: string;            // Data granularity
  indicators: string[];           // Active indicators
  showVolume: boolean;            // Show volume bars
  showGrid: boolean;              // Show grid lines
  showCrosshair: boolean;         // Show crosshair
}

/**
 * Chart status information
 */
export interface ChartStatus {
  status: 'initializing' | 'loading' | 'ready' | 'error' | 'price-update' | 'new-candle';
  message?: string;               // Status message
  timestamp: number;              // Status timestamp
}

/**
 * Data request parameters
 */
export interface DataRequest {
  pair: string;                   // Trading pair
  granularity: string;            // Data granularity
  start?: number;                 // Start timestamp
  end?: number;                   // End timestamp
  limit?: number;                 // Result limit
}

/**
 * Cache entry for data persistence
 */
export interface DataCache {
  key: string;                    // Cache key
  data: CandleData[];            // Cached data
  timestamp: number;              // Cache timestamp
  expiresAt: number;              // Expiration timestamp
}

/**
 * Real-time data subscription
 */
export interface RealtimeSubscription {
  pair: string;                   // Trading pair
  granularity: string;            // Data granularity
  handler: (update: PriceUpdate) => void; // Update handler
  unsubscribe: () => void;        // Unsubscribe function
}

// ============================
// Type Guards
// ============================

/**
 * Check if an object is a valid CandleData
 */
export function isCandleData(obj: any): obj is CandleData {
  return obj &&
    typeof obj.time === 'number' &&
    typeof obj.open === 'number' &&
    typeof obj.high === 'number' &&
    typeof obj.low === 'number' &&
    typeof obj.close === 'number' &&
    typeof obj.volume === 'number';
}

/**
 * Check if an object is a valid Trade
 */
export function isTrade(obj: any): obj is Trade {
  return obj &&
    typeof obj.id === 'string' &&
    typeof obj.timestamp === 'number' &&
    (obj.type === 'buy' || obj.type === 'sell') &&
    typeof obj.price === 'number' &&
    typeof obj.size === 'number';
}

/**
 * Check if an object is a valid Signal
 */
export function isSignal(obj: any): obj is Signal {
  return obj &&
    (obj.type === 'buy' || obj.type === 'sell' || obj.type === 'hold') &&
    typeof obj.strength === 'number' &&
    obj.strength >= 0 &&
    obj.strength <= 1 &&
    typeof obj.price === 'number' &&
    typeof obj.reason === 'string';
}